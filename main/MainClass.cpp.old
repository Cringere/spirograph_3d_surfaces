#include <GL/glew.h>

#include <iostream>

#include <CREngine/MainSpace.h>
#include <CREngine/AssetManager.h>
#include <CREngine/RenderUtils.h>
#include <CREngine/GUI.h>
#include <functional>
#include <CREngine/InputManager.h>


using namespace CREngine;

GUI::WindowManager *wm;

void init() {
	wm = new GUI::WindowManager();

	wm->init(
		new GUI::TextureAtlas("skin.pack", AssetManager::get_texture("skin")),
		AssetManager::get_font("font"),
		5000, 5000
	);

	wm->set_bg(AssetManager::get_texture("bg"));

	wm->add_window(new GUI::SimpleWindow(Math::Vector2D(0.2f, 0.5f),
		[](GUI::Window *wi, GUI::WindowManager *wm) {
			GUI::SimpleWindow *w = (GUI::SimpleWindow *) wi;
			w->set_color(1.0f, 1.0f, 1.0f);
			w->set_tex(wm->texture_atlas->get("window_b"));

			float u = 0.03f;
			w->margin = u * 0.3f;
			w->row_margin = w->margin * 1.1f;
			RenderUtils::Font *font = wm->font;

			//helper variable
			GUI::Label *l;
			//GUI::Slider *s;
			//GUI::ToggleButton *b;

			//set elements
			l = new GUI::Label(Math::Vector2D(u * 7.0f, u), font);
			l->text = "element [0, 0]";
			l->set_tex(wm->texture_atlas->get("label"));
			w->add_element(l);

			l = new GUI::Label(Math::Vector2D(u * 7.0f, u), font);
			l->set_tex(wm->texture_atlas->get("label"));
			l->editable = true;
			w->add_element(l);

			/*b = new GUI::ToggleButton(u, u, font);
			b->set_tex(wm->texture_atlas->get("label"));
			b->set_color(1.0f, 1.0f, 1.0f);
			b->set_color_off(0.0f, 0.0f, 0.0f);
			b->add_on_press_event(new GUI::Event() {
				@Override
				boolean apply() {
					GUI::ToggleButton b = (GUI::ToggleButton) e;
					if (b->toggled) {
						window.add_transition(new GUI::Transition(window, 0.0f, 0.2f, true, 0, position[0], position[0] - size[0] / 3.0f, new Utils.SinFunction()));
					} else {
						window.add_transition(new GUI::Transition(window, 0.0f, 0.2f, true, 0, position[0], position[0] + size[0] / 3.0f, new Utils.SinFunction()));
					}
					return false;
				}
			});
			w->add_element(b);*/

			w->add_row();

			/*l = new GUI::Label(Math::Vector2D(u * 7.0f, u), font);
			l->set_tex(wm->texture_atlas->get("label"));
			l->text = "element [1, 0]";
			w->add_element(l);

			l = new GUI::Label(Math::Vector2D(u * 7.0f, u), font);
			l->set_tex(wm->texture_atlas->get("label"));
			l->text = "element [1, 1]";
			l->fit_to_text();
			w->add_element(l);

			w->add_row();*/

			/*s = new GUI::Slider(u * 12.0f, u, font);
			s->pointer = wm->texture_atlas->get("slider_pointer");
			s->set_tex(wm->texture_atlas->get("slider"));
			s->text = "";
			w->add_element(s);*/


			/*b = new GUI::ToggleButton(u, u, font);
			b->set_tex(wm->texture_atlas->get("monitor_b_off"));
			b->set_color(1.0f, 1.0f, 1.0f);
			b->set_color_off(0.0f, 0.0f, 0.0f);
			w->add_element(b);

			b = new GUI::ToggleButton(u, u, font);
			b->set_tex(wm->texture_atlas->get("monitor_b_off"));

			b->set_color(1.0f, 1.0f, 1.0f);
			b->set_color_off(0.0f, 0.0f, 0.0f);
			w->add_element(b);

			w->add_row();*/

			//w->add_header(HEADER_TYPE.CARD, "window", u, font);
			w->draw_base = true;
		}
	));
}

void handle_input() {

}

void update(float dt) {
	wm->update(dt);
}

void render() {
	glClearColor(0.8, 0.8, 0.8, 1.0);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glClear(GL_COLOR_BUFFER_BIT);

	wm->render();
}

void dispose() {
	delete wm;
}

int main(int argc, char const *argv[]) {
	CREngine::MainSpace::set_main_function_pointers(
		&init,
		&handle_input,
		&update,
		&render,
		&dispose
	);

	CREngine::MainSpace::Configuration conf;

	if (CREngine::MainSpace::run(conf) != 0) return -1;

	return 0;
}
